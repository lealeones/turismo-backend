# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Association {
  _count: AssociationCount
  createdAt: DateTimeISO!
  dsrc: String!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
  urlImage: String!
}

type AssociationCount {
  trips(where: TripWhereInput): Int!
}

input AssociationCreateNestedOneWithoutTripsInput {
  connect: AssociationWhereUniqueInput
  connectOrCreate: AssociationCreateOrConnectWithoutTripsInput
  create: AssociationCreateWithoutTripsInput
}

input AssociationCreateOrConnectWithoutTripsInput {
  create: AssociationCreateWithoutTripsInput!
  where: AssociationWhereUniqueInput!
}

input AssociationCreateWithoutTripsInput {
  createdAt: DateTimeISO
  dsrc: String!
  name: String!
  updatedAt: DateTimeISO
  urlImage: String!
}

input AssociationRelationFilter {
  is: AssociationWhereInput
  isNot: AssociationWhereInput
}

input AssociationWhereInput {
  AND: [AssociationWhereInput!]
  NOT: [AssociationWhereInput!]
  OR: [AssociationWhereInput!]
  createdAt: DateTimeFilter
  dsrc: StringFilter
  id: IntFilter
  name: StringFilter
  trips: TripListRelationFilter
  updatedAt: DateTimeFilter
  urlImage: StringFilter
}

input AssociationWhereUniqueInput {
  AND: [AssociationWhereInput!]
  NOT: [AssociationWhereInput!]
  OR: [AssociationWhereInput!]
  createdAt: DateTimeFilter
  dsrc: StringFilter
  id: Int
  name: StringFilter
  trips: TripListRelationFilter
  updatedAt: DateTimeFilter
  urlImage: StringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type GetTicketResponse {
  """message"""
  message: String!

  """status"""
  status: Int!

  """tickets"""
  tickets: [Ticket!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createAssociation(input: AssociationCreateWithoutTripsInput!): Association!
  createTrip(TripCreateWithoutTicketsInput: TripCreateWithoutTicketsInput!): Trip!
  getNewTicket(input: Float!): GetTicketResponse!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  associations: [Association!]!
  findTrips(currentWeek: Boolean!): [Trip!]!
  ticketAvailable(idTrip: Int!): Float!
  trip(id: Int!): Trip!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Ticket {
  createdAt: DateTimeISO!
  dni: Int!
  id: String!
  isAdult: Boolean!
  name: String!
  status: String!
  tripId: Int!
  updatedAt: DateTimeISO!
}

input TicketListRelationFilter {
  every: TicketWhereInput
  none: TicketWhereInput
  some: TicketWhereInput
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  createdAt: DateTimeFilter
  dni: IntFilter
  id: StringFilter
  isAdult: BoolFilter
  name: StringFilter
  status: StringFilter
  trip: TripRelationFilter
  tripId: IntFilter
  updatedAt: DateTimeFilter
}

type Trip {
  _count: TripCount
  associationId: Int!
  dscr: String!
  id: Int!
  nameAssociation: String
  places: Int!
  startTime: DateTimeISO!
  title: String!
}

type TripCount {
  tickets(where: TicketWhereInput): Int!
}

input TripCreateWithoutTicketsInput {
  association: AssociationCreateNestedOneWithoutTripsInput!
  dscr: String!
  places: Int
  startTime: DateTimeISO!
  title: String!
}

input TripListRelationFilter {
  every: TripWhereInput
  none: TripWhereInput
  some: TripWhereInput
}

input TripRelationFilter {
  is: TripWhereInput
  isNot: TripWhereInput
}

input TripWhereInput {
  AND: [TripWhereInput!]
  NOT: [TripWhereInput!]
  OR: [TripWhereInput!]
  association: AssociationRelationFilter
  associationId: IntFilter
  dscr: StringFilter
  id: IntFilter
  places: IntFilter
  startTime: DateTimeFilter
  tickets: TicketListRelationFilter
  title: StringFilter
}