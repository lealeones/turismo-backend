# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  email: String!
  name: String
  posts: [Post!]
}

type Post {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  title: String!
  content: String
  published: Boolean
  viewCount: Int!
  author: User
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Ticket {
  """id"""
  id: Int!

  """name"""
  name: String!

  """lasName"""
  lasName: String!

  """dni"""
  dni: Int!

  """idTrip"""
  idTrip: Int!
}

type Trip {
  """id"""
  id: Int!

  """startTime"""
  startTime: Timestamp!

  """title"""
  title: String!

  """dscr"""
  dscr: String!

  """dscr"""
  ticket: [Ticket!]
}

type Association {
  id: Float!
  name: String!
  dsrc: String!
  urlImage: String!
  trips: [Trip!]
}

input TicketInput {
  """id"""
  id: Int!

  """name"""
  name: String!

  """lasName"""
  lasName: String!

  """dni"""
  dni: Int!

  """idTrip"""
  idTrip: Int!
}

input TripInput {
  """id"""
  id: Int!

  """startTime"""
  startTime: Timestamp!

  """title"""
  title: String!

  """dscr"""
  dscr: String!

  """dscr"""
  ticket: [TicketInput!]
}

type Query {
  allUsers: [User!]
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post!]
  postById(id: Float!): Post
  feed(searchString: String, skip: Float, take: Float, orderBy: PostOrderByUpdatedAtInput): [Post!]!
  findTrips(currentWeek: Boolean!): [Trip!]!
  trip(id: Int!): Trip!
  tickets: [Ticket!]!
  ticket(id: Int!): Ticket!
  associations: [Association!]!
  association(id: Int!): Association!
}

input UserUniqueInput {
  id: Float
  email: String
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

enum SortOrder {
  asc
  desc
}

type Mutation {
  signupUser(data: UserCreateInput!): User!
  createDraft(data: PostCreateInput!, authorEmail: String!): Post!
  incrementPostViewCount(id: Float!): Post!
  togglePublishPost(id: Float!): Post
  deletePost(id: Float!): Post
  createTrip(createTripInput: CreateTripInput!): Trip!
  updateTrip(updateTripInput: UpdateTripInput!): Trip!
  removeTrip(id: Int!): Trip!
  createTicket(createTicketInput: CreateTicketInput!): Ticket!
  updateTicket(updateTicketInput: UpdateTicketInput!): Ticket!
  removeTicket(id: Int!): Ticket!
  createAssociation(createAssociationInput: CreateAssociationInput!): Association!
  updateAssociation(updateAssociationInput: UpdateAssociationInput!): Association!
  removeAssociation(id: Int!): Association!
}

input UserCreateInput {
  email: String!
  name: String
  posts: [PostCreateInput!]
}

input PostCreateInput {
  title: String!
  content: String
}

input CreateTripInput {
  """startTime"""
  startTime: Timestamp!

  """title"""
  title: String!

  """dscr"""
  dscr: String!

  """dscr"""
  ticket: [TicketInput!]
}

input UpdateTripInput {
  """startTime"""
  startTime: Timestamp

  """title"""
  title: String

  """dscr"""
  dscr: String

  """dscr"""
  ticket: [TicketInput!]
  id: Int!
}

input CreateTicketInput {
  """name"""
  name: String!

  """lasName"""
  lasName: String!

  """dni"""
  dni: Int!

  """idTrip"""
  idTrip: Int!
}

input UpdateTicketInput {
  """name"""
  name: String

  """lasName"""
  lasName: String

  """dni"""
  dni: Int

  """idTrip"""
  idTrip: Int
  id: Int!
}

input CreateAssociationInput {
  """nombre de la asociacion"""
  name: String!
  dsrc: String!
  urlImage: String!
  trips: [TripInput!]
}

input UpdateAssociationInput {
  """nombre de la asociacion"""
  name: String
  dsrc: String
  urlImage: String
  trips: [TripInput!]
  id: Int!
}